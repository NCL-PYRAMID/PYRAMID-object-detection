###############################################################################
# Base image - CUDA on Ubuntu
# CUDA 10.2 is the oldest supported by conda-force using CONDA_CUDA_OVERRIDE
#  see: https://conda-forge.org/docs/user/tipsandtricks.html
###############################################################################
FROM nvidia/cuda:10.2-devel-ubuntu18.04

###############################################################################
# Installation variables
###############################################################################
ARG APP_HOME=/deeplearning


###############################################################################
# Anaconda set up
# See: https://pythonspeed.com/articles/activate-conda-dockerfile/
###############################################################################

# apt setup
# See https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892/15
RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
RUN apt update --fix-missing
#RUN apt-get update
#RUN apt-get dist-upgrade -y
RUN apt install wget -y
RUN apt install bzip2 -y
RUN apt install ca-certificates -y
RUN apt install locales -y
RUN apt install libglib2.0-0 -y
RUN apt install libxext6 -y
RUN apt install libsm6 -y
RUN apt install libxrender1 -y

# Do this to prevent tzdata operating interactively. tzdata is a dependency of python3-opencv
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata

RUN apt install python3-opencv -y
RUN apt-get install swig -y
RUN apt upgrade -y

# Relevant environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

# Get and install Anaconda
RUN wget https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh -O ~/anaconda.sh
RUN /bin/bash ~/anaconda.sh -b -p /opt/conda
RUN ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
RUN conda update -y -n base -c defaults conda
# Use conda and strict channel priority (setup ~/.condarc for this)
RUN echo -e \
"channel_priority: strict\n\
channels:\n\
  - pytorch\n\
  - conda-forge\n\
  - esri\n\
  - defaults" > ~/.condarc

# Create fod environment and set CUDA root variables
# Requires Python 3.7. All requirements are in fod-environment.yml
WORKDIR $APP_HOME
RUN conda create -n fod python=3.7 -y
#ENV CUDA_ROOT /usr/local/cuda/bin
ENV CUDA_HOME /usr/local/cuda-10.2
ENV FORCE_CUDA 1

# Need this if we want to use RUN commands in the proper conda environment
SHELL ["conda", "run", "-n", "fod", "/bin/bash", "-c"]

RUN ["pip", "install", "cython"]
RUN ["conda", "install", "pytorch==1.5.0", "-y"]
RUN ["conda", "install", "cudatoolkit=10.2", "-y"]
RUN ["conda", "install", "torchvision==0.6.0", "-y"]

# Copy application to working directory. Need to do this here so we can use the config
# files and scripts in the container
WORKDIR $APP_HOME
COPY . ./

# Install the rest of the applications
RUN ["pip", "install", "-r", "requirements.txt"]

# swig compilation
WORKDIR $APP_HOME/DOTA_devkit
RUN ["swig", "-c++", "-python", "polyiou.i"]
RUN ["python", "setup.py", "build_ext", "--inplace"]

# Setup and run the application
WORKDIR $APP_HOME
RUN ["bash", "./compile.sh"]
RUN ["python", "setup.py", "develop"]
RUN ["python", "demo_large_image.py"]


# RUN ["pip", "install", "mmcv-full", "-f", "https://download.openmmlab.com/mmcv/dist/cu102/torch1.5.0/index.html"]
# RUN ["pip", "install", "mmcv-full"]
# RUN ["pip", "install", "git+https://github.com/open-mmlab/mmdetection.git"]
# RUN ["git", "clone", "https://github.com/open-mmlab/mmdetection3d.git"]

# WORKDIR /deeplearning/mmdetection3d
# RUN ["pip", "install", "-r", "requirements/build.txt"]
# RUN ["pip", "install", "-v", "-e", "."]
# RUN ["pip", "uninstall", "pycocotools", "-y"]
# RUN ["pip", "install", "pycocotools"]
# RUN ["pip", "uninstall", "mmpycocotools", "-y"]
# RUN ["pip", "install", "mmpycocotools"]

# RUN ["pip", "install", "--ignore-installed", "PyYAML"]
# RUN ["pip", "install", "open3d"]
# RUN apt install -y python3-pip
# RUN pip install torch torchvision torchaudio


#RUN pip install -r requirements.txt



# Data directory for DAFNI
RUN mkdir /data
RUN mkdir /data/inputs
RUN mkdir /data/outputs
